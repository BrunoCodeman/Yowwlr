"use strict";
var core_1 = require("@angular/core");
var backend_service_1 = require("./backend.service");
var firebase = require("nativescript-plugin-firebase");
var Observable_1 = require('rxjs/Observable');
var BehaviorSubject_1 = require('rxjs/BehaviorSubject');
require('rxjs/add/operator/share');
var FirebaseService = (function () {
    function FirebaseService(ngZone) {
        this.ngZone = ngZone;
        this.yowls = new BehaviorSubject_1.BehaviorSubject([]);
        this._allYowls = [];
        this.chats = new BehaviorSubject_1.BehaviorSubject([]);
        this._allChats = [];
    }
    FirebaseService.prototype.getMessage = function () {
        firebase.addOnMessageReceivedCallback(function (data) {
            alert(JSON.stringify(data));
        });
    };
    FirebaseService.prototype.register = function (user) {
        return firebase.createUser({
            email: user.email,
            password: user.password
        }).then(function (result) {
            return JSON.stringify(result);
        }, function (errorMessage) {
            alert(errorMessage);
        });
    };
    FirebaseService.prototype.login = function (user) {
        return firebase.login({
            type: firebase.LoginType.PASSWORD,
            email: user.email,
            password: user.password
        }).then(function (result) {
            backend_service_1.BackendService.token = result.uid;
            return JSON.stringify(result);
        }, function (errorMessage) {
            alert(errorMessage);
        });
    };
    FirebaseService.prototype.logout = function () {
        backend_service_1.BackendService.token = "";
        firebase.logout();
    };
    FirebaseService.prototype.resetPassword = function (email) {
        return firebase.resetPassword({
            email: email
        }).then(function (result) {
            alert(JSON.stringify(result));
        }, function (errorMessage) {
            alert(errorMessage);
        }).catch(this.handleErrors);
    };
    FirebaseService.prototype.getYowls = function () {
        var _this = this;
        return new Observable_1.Observable(function (observer) {
            var path = 'Yowls';
            var onValueEvent = function (snapshot) {
                _this.ngZone.run(function () {
                    var results = _this.handleSnapshot(snapshot.value);
                    observer.next(results);
                });
            };
            firebase.addValueEventListener(onValueEvent, "/" + path);
        }).share();
    };
    FirebaseService.prototype.handleSnapshot = function (data) {
        //empty array, then refill and filter
        this._allYowls = [];
        if (data) {
            for (var id in data) {
                var result = Object.assign({ id: id }, data[id]);
                this._allYowls.push(result);
            }
            this.publishUpdates();
        }
        return this._allYowls;
    };
    FirebaseService.prototype.getChats = function () {
        var _this = this;
        return new Observable_1.Observable(function (observer) {
            var path = 'Chats';
            var onValueEvent = function (snapshot) {
                _this.ngZone.run(function () {
                    var results = _this.handleChatSnapshot(snapshot.value);
                    observer.next(results);
                });
            };
            firebase.addValueEventListener(onValueEvent, "/" + path);
        }).share();
    };
    FirebaseService.prototype.handleChatSnapshot = function (data) {
        //empty array, then refill and filter
        this._allChats = [];
        if (data) {
            for (var id in data) {
                var result = Object.assign({ id: id }, data[id]);
                this._allChats.push(result);
            }
            this.publishChatUpdates();
        }
        return this._allChats;
    };
    FirebaseService.prototype.sendYowl = function (Yowl) {
        var yowl = Yowl;
        return firebase.push("/Yowls", { "name": "Mr. Growlllr", "username": "MrGrwwlr", "text": "Yooowwwwlll!", "UID": backend_service_1.BackendService.token, "date": 0 - Date.now() }).then(function (result) {
            return 'Yowwled!';
        }, function (errorMessage) {
            console.log(errorMessage);
        });
    };
    FirebaseService.prototype.chat = function (message) {
        //let chat = Chat; 
        console.log(message);
        return firebase.push("/Chats", { "message": message, "to": "MrGrwwlr", "from": backend_service_1.BackendService.token, "date": 0 - Date.now() }).then(function (result) {
            return "chatted";
        }, function (errorMessage) {
            console.log(errorMessage);
        });
    };
    FirebaseService.prototype.publishUpdates = function () {
        this._allYowls.sort(function (a, b) {
            if (a.date < b.date)
                return -1;
            if (a.date > b.date)
                return 1;
            return 0;
        });
        this.yowls.next(this._allYowls.slice());
    };
    FirebaseService.prototype.publishChatUpdates = function () {
        this._allChats.sort(function (a, b) {
            if (a.date > b.date)
                return -1;
            if (a.date < b.date)
                return 1;
            return 0;
        });
        this.chats.next(this._allChats.slice());
    };
    FirebaseService.prototype.handleErrors = function (error) {
        console.log(JSON.stringify(error));
        return Promise.reject(error.message);
    };
    FirebaseService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [core_1.NgZone])
    ], FirebaseService);
    return FirebaseService;
}());
exports.FirebaseService = FirebaseService;
//# sourceMappingURL=data:application/json;base64,